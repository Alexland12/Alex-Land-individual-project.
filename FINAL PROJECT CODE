{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Alexland12/Alex-Land-individual-project./blob/main/FINAL%20PROJECT%20CODE\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "2-Al9cr-NBzW"
      },
      "outputs": [],
      "source": [
        "#imports all required librarys\n",
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython.display import display, Image, clear_output\n",
        "import io\n",
        "from google.colab import files\n",
        "from google.colab.patches import cv2_imshow\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from openpyxl import Workbook\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from matplotlib import pyplot as plt\n",
        "%matplotlib inline\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from google.colab import drive\n",
        "import openpyxl"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1V89QnCx4XHu"
      },
      "source": [
        "colour detector should be implemented here."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xDKmWjQxo4II",
        "outputId": "12a72f36-a8ac-45a4-cd20-47faebcb734b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "drive.mount('/content/drive')\n",
        "\n",
        "lower_blue = np.array([90, 50, 50])\n",
        "upper_blue = np.array([130, 255, 255])\n",
        "\n",
        "lower_red = np.array([0, 50, 50])\n",
        "upper_red = np.array([10, 255, 255])\n",
        "\n",
        "lower_white = np.array([0, 0, 180])\n",
        "upper_white = np.array([180, 25, 255])\n",
        "\n",
        "lower_green = np.array([35, 40, 40])\n",
        "upper_green = np.array([45, 255, 255])\n",
        "\n",
        "kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (7, 7))  # You can adjust the size of the kernel as needed\n",
        "\n",
        "def calculate_number_of_players(center_positions):\n",
        "    return len(center_positions)\n",
        "\n",
        "def read_excel_and_convert_to_numpy(file_path):\n",
        "    df = pd.read_excel(file_path)\n",
        "    numpy_array = df.to_numpy()\n",
        "    return numpy_array\n",
        "\n",
        "def threshold_predictions(predictions):\n",
        "    return np.where(predictions < 0.5, 0, 1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0LMY9PI_4cqz"
      },
      "source": [
        "code below is for producing spreadsheet of inputs. Outputs need to be manually added as it is at the minute."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 38
        },
        "id": "mujUnHicD5oG",
        "outputId": "01301154-3a81-41f8-cc42-28ed7e1f7799"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-05f41cc1-2026-4f13-b1f4-f40759bc16c8\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-05f41cc1-2026-4f13-b1f4-f40759bc16c8\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# File Upload\n",
        "uploaded = files.upload()\n",
        "if not uploaded:\n",
        "    print(\"File not uploaded\")\n",
        "    exit()\n",
        "\n",
        "filename = next(iter(uploaded))\n",
        "clear_output()\n",
        "print(f\"Uploaded file: {filename}\")\n",
        "\n",
        "video = cv2.VideoCapture(filename)\n",
        "\n",
        "if not video.isOpened():\n",
        "    print(\"Error opening video file\")\n",
        "    exit()\n",
        "\n",
        "# Displays fps\n",
        "fps = video.get(cv2.CAP_PROP_FPS)\n",
        "print(f\"frame rate of the video: {fps} FPS\")\n",
        "\n",
        "frame_count = 0\n",
        "\n",
        "# Initialize DataFrame\n",
        "df = pd.DataFrame(columns=['frame', 'player_grouping', 'number_of_Players', 'players_distance_0_to_2', 'players_distance_2_to_5', 'players_distance_5_to_20'])\n",
        "\n",
        "prev_center_positions = []\n",
        "\n",
        "while video.isOpened():\n",
        "    ret, frame = video.read()\n",
        "    if not ret:\n",
        "        break\n",
        "\n",
        "    frame_count += 1\n",
        "\n",
        "    if frame_count % 3 == 0:  # Analyze every third frame\n",
        "        if frame_count > 0:\n",
        "            hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n",
        "            greenmask = cv2.inRange(hsv, lower_green, upper_green)\n",
        "            GREEN = cv2.bitwise_and(frame, frame, mask=greenmask)\n",
        "            dilated_image = cv2.dilate(GREEN, kernel, iterations=5)\n",
        "            eroded_image = cv2.erode(dilated_image, kernel, iterations=7)\n",
        "            hsv1 = cv2.cvtColor(eroded_image, cv2.COLOR_BGR2HSV)\n",
        "            greenmask1 = cv2.inRange(hsv1, lower_green, upper_green)\n",
        "            FINAL = cv2.bitwise_or(frame,frame,mask=greenmask1)\n",
        "\n",
        "            hsv2 = cv2.cvtColor(FINAL, cv2.COLOR_BGR2HSV)\n",
        "            bluemask = cv2.inRange(hsv2, lower_blue, upper_blue)\n",
        "\n",
        "            contours, _ = cv2.findContours(bluemask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n",
        "            center_positions = []\n",
        "\n",
        "            for contour in contours:\n",
        "                x, y, w, h = cv2.boundingRect(contour)\n",
        "                if w * h > 100:\n",
        "                    center_x = x + w // 2\n",
        "                    center_y = y + h // 2\n",
        "                    center_positions.append((center_x, center_y))\n",
        "\n",
        "                    cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)\n",
        "\n",
        "            img_with_markers = frame.copy()\n",
        "\n",
        "            for center in center_positions:\n",
        "                cv2.circle(img_with_markers, (center[0], center[1]), 5, (0, 255, 0), -1)\n",
        "\n",
        "            # Calculate average distance between center points\n",
        "            if len(center_positions) > 0:\n",
        "                distances = np.linalg.norm(np.diff(center_positions, axis=0), axis=1)\n",
        "                average_distance = np.mean(distances)\n",
        "            else:\n",
        "                average_distance = 0\n",
        "\n",
        "            distance_moved = []\n",
        "            if prev_center_positions:\n",
        "                for curr_center in center_positions:\n",
        "                    # Find the nearest box in the previous frame\n",
        "                    nearest_center = min(prev_center_positions, key=lambda prev_center: np.linalg.norm(np.array(curr_center) - np.array(prev_center)))\n",
        "                    move = np.linalg.norm(np.array(curr_center) - np.array(nearest_center))\n",
        "                    if move <= 20:  # Filter out distances greater than 20\n",
        "                        distance_moved.append(move)\n",
        "                    else:\n",
        "                        distance_moved.append(0.0)  # Mark distance as 0 for filtered out players\n",
        "            else:\n",
        "                distance_moved = [0.0] * len(center_positions)  # Initialize as floats\n",
        "\n",
        "            num_players_in_view = calculate_number_of_players(center_positions)\n",
        "\n",
        "            players_distance_0_to_2 = sum(1 for move in distance_moved if 0 <= move <= 2)\n",
        "\n",
        "            players_distance_2_to_5 = sum(1 for move in distance_moved if 2 < move <= 5)\n",
        "\n",
        "            players_distance_5_to_20 = sum(1 for move in distance_moved if 5 < move <= 20)\n",
        "\n",
        "\n",
        "\n",
        "            new_data = [{'frame': frame_count, 'player_grouping': average_distance,\n",
        "                         'number_of_players': num_players_in_view, 'players_distance_0_to_2': players_distance_0_to_2,\n",
        "                         'players_distance_2_to_5': players_distance_2_to_5, 'players_distance_5_to_20': players_distance_5_to_20}]\n",
        "            df = pd.concat([df, pd.DataFrame(new_data)])\n",
        "\n",
        "            prev_center_positions = center_positions\n",
        "\n",
        "video.release()\n",
        "\n",
        "# Save DataFrame to Excel file\n",
        "excel_filename = 'Training_Data.xlsx'\n",
        "df.to_excel(excel_filename, index=False, columns=['frame', 'player_grouping', 'number_of_players', 'players_distance_0_to_2', 'players_distance_2_to_5', 'players_distance_5_to_20'], engine='openpyxl')\n",
        "\n",
        "print(f\"Training Data saved to: {excel_filename}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gSlSX0yRHDw1"
      },
      "source": [
        "this next code changes grouping feature to be binary so the model can process it better.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pGZqWZVhEbsw"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nopsyq6Y9znb",
        "outputId": "5924542c-41df-457c-8153-9b140f532892"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Excel file processed successfully.\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_excel(\"/content/Training_Data.xlsx\")\n",
        "\n",
        "for i in range(0, len(df)):\n",
        "    if i == 0:\n",
        "        continue  # Skip the first row since there's no previous row to reference\n",
        "\n",
        "    if df['player_grouping'][i] == 0:\n",
        "        df.at[i, 'player_grouping'] = df.at[i-1, 'player_grouping']\n",
        "    if df['player_grouping'][i] > 600 or df['player_grouping'][i] < 200:\n",
        "        df.at[i, 'player_grouping'] = df.at[i-1, 'player_grouping']\n",
        "    if df['player_grouping'][i] > 400:\n",
        "        df.at[i, 'player_grouping'] = 1\n",
        "    else:\n",
        "        df.at[i, 'player_grouping'] = 0\n",
        "\n",
        "df.to_excel(\"Processed_training_data1.xlsx\", index=False)\n",
        "print(\"Excel file processed successfully.\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N1uYAP4C1dk-"
      },
      "source": [
        "between here 'space pressed' column needs to be added to the excel sheet."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a-sEetWE1o5P"
      },
      "outputs": [],
      "source": [
        "df = pd.read_excel(\"/content/4 Feature dataset.xlsx\") #add path for excel file here.\n",
        "X = df[['player_grouping', 'players_distance_0_to_2', 'players_distance_2_to_5', 'players_distance_5_to_20']] #inputs for model (features)\n",
        "y = df['space pressed'] #outputs for model (target variable)\n",
        "\n",
        "#following 2 lines scale the inputs to be of the same scale, better or worse than manually scaling?\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "#splits dataset into training and testing sections, currently 20% is used for testing.\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=25)\n",
        "X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=25)\n",
        "\n",
        "#compiles the model. 5000 epochs used.\n",
        "model = keras.Sequential([\n",
        "    keras.layers.Dense(16, activation='relu', input_shape=(X_train.shape[1],)),\n",
        "    keras.layers.BatchNormalization(),\n",
        "    keras.layers.Dense(1, activation='sigmoid')\n",
        "])\n",
        "\n",
        "model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=500, restore_best_weights=True)\n",
        "#if the same accuracy is repeated 500 times in a row the model is stopped early.\n",
        "\n",
        "history = model.fit(X_train, y_train, epochs=5000, validation_data=(X_val, y_val), callbacks=[early_stopping])\n",
        "\n",
        "test_loss, test_acc = model.evaluate(X_test, y_test)\n",
        "print(f'Test Loss: {test_loss}, Test Accuracy: {test_acc}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-d6Izb9VA1ZO",
        "outputId": "03f184d0-69d1-49d0-ce41-db317542345c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "9/9 [==============================] - 0s 4ms/step - loss: 0.3516 - accuracy: 0.8525\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "[0.3515990674495697, 0.8525179624557495]"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model.evaluate(X_test,y_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MuDECq9C5JYq"
      },
      "source": [
        "Code below takes the input file and leaves onlythe required features, before running it through the trained model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wQmdIBiAhTgy",
        "outputId": "764e44e1-8a6e-4bf8-ed2f-a2c805efe386"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Filtered and scaled DataFrame saved to: /content/drive/MyDrive/output_file.xlsx\n"
          ]
        }
      ],
      "source": [
        "input_file_path = '/content/Processed_training_data1.xlsx'\n",
        "output_file_path = '/content/drive/MyDrive/output_file.xlsx'\n",
        "\n",
        "df = pd.read_excel(input_file_path)\n",
        "selected_columns = ['player_grouping', 'players_distance_0_to_2', 'players_distance_2_to_5', 'players_distance_5_to_20']\n",
        "filtered_df = df[selected_columns]\n",
        "\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaled_data = scaler.fit_transform(filtered_df)\n",
        "\n",
        "scaled_df = pd.DataFrame(scaled_data, columns=selected_columns)\n",
        "\n",
        "scaled_df.to_excel(output_file_path, index=False)\n",
        "print(\"Filtered and scaled DataFrame saved to:\", output_file_path)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yiN25nl_kcYZ"
      },
      "outputs": [],
      "source": [
        "file_path = '/content/drive/MyDrive/output_file.xlsx'\n",
        "new_inputs = read_excel_and_convert_to_numpy(file_path)\n",
        "predictions = model.predict(new_inputs)\n",
        "thresholded_predictions = threshold_predictions(predictions)\n",
        "print(thresholded_predictions)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SPDg5GmkxjXj",
        "outputId": "fa2893f8-370c-4f04-89b9-8f28d9caa669"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Number of 1's: 136\n",
            "Number of 0's: 35\n"
          ]
        }
      ],
      "source": [
        "count_ones = np.count_nonzero(thresholded_predictions == 1)\n",
        "\n",
        "# Count the number of 0's\n",
        "count_zeros = np.count_nonzero(thresholded_predictions == 0)\n",
        "\n",
        "print(\"Number of 1's:\", count_ones)\n",
        "print(\"Number of 0's:\", count_zeros)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BdWKjGghx5ni",
        "outputId": "624793ef-7f2e-468e-bb78-3be3b23b5529"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "length of clip: 20.52\n",
            "ball is in play for: 16.32\n",
            "added time required: 4.2\n"
          ]
        }
      ],
      "source": [
        "number_of_1_frames = count_ones * 3\n",
        "number_of_0_frames = count_zeros * 3\n",
        "total_number_frames = number_of_0_frames + number_of_1_frames\n",
        "\n",
        "length_of_clip = total_number_frames / fps\n",
        "print(\"length of clip:\", length_of_clip)\n",
        "\n",
        "ball_in_play =  number_of_1_frames / fps\n",
        "print(\"ball is in play for:\", ball_in_play)\n",
        "\n",
        "Added_time = number_of_0_frames / fps\n",
        "print(\"added time required:\", Added_time)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPGW9+BYD0Gcx8fpaSqknXZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}